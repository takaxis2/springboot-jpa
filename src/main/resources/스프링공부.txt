#스프링 포트 변경
  - resource/application.properties에서 server.port=9090등으로 변경

#컨트롤러
  - 스프링에서 요청을 받는 부분
  - @RestContoller라는 어노테이션이 필요
  - @RequestMapping("/???"): URI를 지정해준다, path 속성으로 경로, method도 지정 가능 
#GET api
  - @GetMapping("/hello")//http://localhost:8080/api/hello
  - @PathVariable은 경로의 {}을 추가함으로 사용이 가능하다, 매개변수로 @PathVariable String 변수이름 형식으로 사용가능, GetMapping에서의 {이름}과 매개변수로 지정한 이름이 같아야한다, 다르게 쓸 경우에는         @PathVariable(name="name") String pathName처럼 매칭시켜줘야한다
  - @RequestParam은 쿼리로 값을 받는다, Map으로도 받을 수 있고, 매개변수 하나하나에 @RequestParam을 붙여 명시적으로 쿼리값을 받아 올 수 있다, 이 방법은 사용자가 올바른 값을 넣지 않으면 오류가 발생할 수 있다. 
    마지막 방법으로는  쿼리 파라미터에 대한 객체를 생성하는 방법이 있다. 멤버는 파라미터의 값과 동일한 이름이며 다른 방법과는 다르게 @RequestParam을 붙히지 않는다. 스프링이 자체적으로 쿼리 파라미터와 클래스 멤버      를 매칭시킨다

#POST api
  - @PostMapping()을 사용 기본적인것은 같음, get방식에서는 @RequestParam으로 데이터를 받았지만 post방식에서는 @RequestBody로 받는다 
  - 카멜케이스와 스네이크케이스등 변수 이름 형식이 다르게 올 수 있다 @JsonProperty()를 변수에 써줌으로서 
    카멜, 스네이크 둘다 대응 가능

#PUT api
  - @JsonProperty가 하나하나 다 적용해야했다면 @JsonNaming(value=PropertyNamingStrategies.SnakeCaseStrategy.class)로 해당 클래스 전체에 적용가능하다 
  
#DELETE api
  - @RequestParam으로 데이터를 받는다

#Response
  - 자동으로 response를 써준다
  - json의 경우 req -> object mapper -> object -> method ->object mapper -> json -> response 이런 식
  - @JsonNaming이나 @JsonProperty로 response시에 이름 형식을 바꿀 수있다
  - ResponseEntity객체를 이용할 수 도 있다. ResponseEntit.status(HttpStatus.CREATED).body(???); 헤더 등 다른것도 설정    가능
  - html파일을 내려줄때는 @RestContoller대신 @Controller 어노테이션을 사용하고 리턴 값을 내려줄 html파일의 이름(String)으로 한다 html 파일은 resource의 static 폴더에 생성한다 
  - @Controller 어노테이션에서 리턴값이 String이면 리소스를 찾지만 @ResponseBody 어노테이션이 붙으면 responsebody를 생성한다 
  - 값을 지정하지 않으면 primitive type은 0으로 객체는 null로 초기화된다, 
    @JsonInclude(JsonInclude.Include.NON_NULL)로 null값은 보내지 않을 수 있다
 
#ObjectMapper
  - Text JSON -> Object, Object -> Text JSON
  - req JSON -> Object, res Object -> JSON
  - objectMapper.writeValuesAsStrinig로 Object->text로 변경할때 get method를 사용
  - objectMapper.readValue로 text->Object로 변경할땐 디폴트 생성자 필요

#IoC (inversion of control)
  - 제어의 역전, 일반적인 Java 객체를 new로 생성,관리가 아닌 Spring Container에 맡긴다
  - 개발자 -> 프레임워크로 객체관리의 제어 권한이 넘어감
  - Container에 사용하는 객체가 싱글턴의 형태로 관리됨

#DI (dependency injection)
  - 객체를 사용하기위해 주입받는다
  - 의존성으로부터 격리시켜 코드 테스트에 용이
  - 코드를 확장,변경에 영향을 최소화한다
  - 순환참조를 막는다

# @Component("???")
  - 스프링이 객체를 관리하게된다, bean으로 등록한다
  - ???로 클래스명과 별개로 이름 지정 가능

# @SpringBootAplication
  - 앱이 스프링으로 동작하게 한다, 자기가 Bean에 가진 객체들을 확인가능

# ApplicationContextProvider
  - bean에 접근할때 사용하는 방법

# @Qualifier()
  - 스프링이 DI를 할때 컴포넌트가 2개 이상일 경우 명시적으로 지정해줘야한다

# @Configuration
  - 한개의 클래스에서 여러개의 bean을 등록할때 사용
  - @Bean으로 등록, 메소드용 어노테이션 class에는 사용불가,클래스는 @Componenet/@Configuration 사용

# AOP
  - 특별한 경우 제외, MVC 웹 어플리케이션= Web, Business, Data Layer로 정의
  - WEb Layer : REST API를 제공, Client 중심의 로직 적용, res 내려주기 또는 status코드 변경 
  - Business Layer : 내부 정책에따른 logic개발, 주로 해당부분을 개발
  - Data Layer : 데이터 베이스 및 외부와의 연동을 처리
  - @Aspect : AOP를 정의하는 클래스에 할당
  - @Pointcut : 기능을 어디에 적용시킬지, 메소드? Annotation? 등 AOP적용 지점을 설정
  - @Before : 메소드가 실행하기 이전
  - @After : 메소드가 성공적으로 실행 후, 예외가 발생 되더라고 실행
  - @AfterReturning : 메소드 호출 성공 실행시(Not Throws)
  - @AfterThrowing : 메소드 호출 실패 예외 발생(Throws)
  - @Around : Before/ After 모두 제어

# AOP dependency 추가
 - build.gradle 파일에 dependencies{}에 implementation에 추가 시킨다

# @PointCut("표현식")
  - 표현식으로 어디에 적용시킬지 결정
  - execution(표현식)
  - @annotation(표현식)으로 어노테이션만 설정도 가능

# @Before("??()")
  - 이 어노테이션이 붙은 함수는 ??함수가 실행하기 전에 실행된다
  - JoinPoint joinPoint로 넘어가는 값을 확인가능

# @AfterReturning(value="??()", returning="???")
  - 이 어노테이션이 붙은 함수는 ??함수가 끝난 시점에 실행된다
  - 어노테이션의 ???를 어노테이션이 붙은 함수가 매개변수로 받을 수 있고 어노테이션과 매개변수의 이름은 같아야한다

# @Around("???")
  - ProceedingJoinPoint joinPoint를 함수의 매개변수로 받을 수 있다
  - ???의 전후로 실행
  - 중앙에서 Object result = joinPoint.proceed()를 사용하여 비즈니스 로직을 실행
  - around 어드바이스의 경우는 클라이언트 호출을 가로챈다. 만일 around 어드바이스 메소드에서 막바로 return을 해 버리면 비지니스 메소드 자체가 실행이 안된다. 
따라서 around Advice 메소드에서 비지니스 메소드 호출에 대한 책임을 감당해야 한다. 즉 around Advice가 비지니스 호출을 가로챘기 때문에 around Advice에서 비지니스 호출을 해 주지 않으면 비지니스 메소드는 실행 될 길이 없다. 그런데 그렇게 할려면 비지니스 메소드에 대한 정보를 around Advice 메소드가 가지고 있어야 하는데 그 정보를 Srping 컨테이너가 around Advice 메소드로 넘겨준다. 그게 ProceedingJoinPoint 객체이다.

# @Target({})
  - 사용자 정의 어노테이션 생성때 사용
  - 중괄호 안에 사용자 정의 어노테이션이 사용 가능한 함수, 생성자 등을 지정한다
  - ex) ElementType.TYPE, ElementType.METHOD etc

# @Retention()
  - 사용자 정의 어노테이션 생성에 사용, 메모리 보유 범위를 설정한다
  - SOURCE : 어노테이션을 사실상 주석처럼 사용하는 것. 컴파일러가 컴파일할때 해당 어노테이션의 메모리를 버립니다. 
  - CLASS : 컴파일러가 컴파일에서는 어노테이션의 메모리를 가져가지만 실질적으로 런타임시에는 사라지게 됩니다. 런타임시에 사라진다는 것은 리플렉션으로 선언된 어노테이션 데이터를 가져올 수 없게 됩니다. 디폴트값입니다.
  - RUNTIME : 어노테이션을 런타임시에까지 사용할 수 있습니다. JVM이 자바 바이트코드가 담긴 class 파일에서 런타임환경을 구성하고 런타임을 종료할 때까지 메모리는 살아있습니다.
  - ex) RetentionPolicy.RUNTIME


# Spring Boot Validation
  - null값에 접근시 NullPointerExection발생 -> 이러한 부분을 방지하기 위해 미리 검증하는 과정
  - 스프링에서는 어노테이션으로 관리한다

  - @Size : 문자길이 측정, int 타입 불가
  - @NotNull : null 불가
  - @NotEmpty : null,"" 불가
  - @NotBlank :  null,"", " " 불가
  - @Past : 과거날자
  - @PastOrPresent : 오늘이거나 과거 날자
  - @Future : 미래 날자
  - @FutureOrPresent : 오늘이거나 미래
  - @Pattern : 정규식 적용
  - @Max : 최대값
  - @Min : 최소값
  - @AssertTrue / False : 별도 Logic적용
  - @Valid : 해당 object validation 실행

  - implementation("org.springframework.boot:spring-boot-starter-validation") 을 gradled dependencies에 추가
  - 휴대폰 정규식 : "\\d{2,3}-\\{3,4}-\\d{4}$"

  - Controller의 rest api에서 함수에 BindingResult타입의 메게변수를 받을 수 있다, @Valid의 결과 값이 담긴다, .hasErrors()로 어떤 에러가 있는지 확인 .getAllErrors()로 가져온다, FieldError로 어디서 오류가 나는지도 확인가능
  - validation 어노테이션에 message필드에 메세지를 넣으면 FieldError로 확인가능
  - @AssertTrue는 리턴이 boolean형이고 함수명은 is로 시작해야한다
  - @Constraint로 커스텀 validation annotation제작 가능(여기는 더 알아봐야함)
  - 클래스의 멤버로 다른 클래스를 들고있고 그곳에서 멤버변수에 대한 validation을 확인한다고해도 맨 위의 클래스에서@Valid를 사용하지 않으면 멤버변수클래스의 어노테이션 작동안함


# Exception 처리
  - @ControllerAdvice : Global 예외처리 및 특정 pakage / Controller 예외처리, view용
  - @RestContollerAdvice : rest용
  - @ExceptionHandler(value=???.class) : 특정 Controller의 예외처리, ???로 원하는 에러나 예외를 받을 수있다
  - 에러/예외 처리 코드를 특정 코드(ex. Controller)에서 선언하면 전역으로 사용중인 코드 대신 실행됨
  - 기본적으로 전역으로 사용되지만 @RestContollerAdvice(basePackageClasses=???)로 특정 클래스에만 적용가능


#Lombok
  - @Getter
  - @Setter
  - @NoArgsConstructor
  - @AllArgsConstructor
  - @Data : getter, setter, tostring등을 다 만들어준다

#Filter / interceptor
#Filter 
  - Web Application에서 등록되고 관리되는 영역. Client의 요청/응답에 대하여 최초/최종 단계에 위치하며 요청/응답의 정보를 변경하거나, Spring에 의해 데이터가 변환되기 전의 순수한 값을 확인가능
  - 유일하게 ServletRequest, ServletResponse의 객체를 변환 할 수 있다
  - Spring Framework에서는 주로 request/response의 Logging 용도로 활용하거나, 인증과 관련된  Logic들을 해당 Filter에서 처리
  - 이를 선/후처리 함으로, Service business logic과 분리 시킨다
  - 세션확인으로 로그아웃, 401 unAuthorized, 다단계 인증
  - 특정부분에만 적용가능 : 최상단에 @ServletComponentScan, filter쪽에는 @Component가 아닌 @WebFilter(urlPatterns="/api/user/*")

#Interceptor
  - Filter와 비슷하지만 차이점은 Spring Context에 등록된다 -> Spring기능 활용
  - AOP와 유사한 기능을 제공
  - 주로 인증 단계를 처리하거나, Logging을 하는데 사용
  - 선/후처리를 함으로, Service business logic과 분리
  - ServletRequest request는 필터에서 ContentCachingRequestWrapper로 형변환하고 chain.doFilter()를 하면 ContentCachingRequestWrapper로 형변환이 가능하다(필터에서 넘겨주기 때문) 
  - handler : data binding, validation, type conversion, formatting, invoke Service layer, update model and state, controller의 HandlerMapping 정보 등을 가진다

# 비동기 처리하기
  - 

## Server(Client) to Server 연결
# RestTemplate를 사용 : put, delete, post, get등이 있고, 리턴도 Object나 ResponseEntity로 받을 수 있다





##JPA
#영속성
- 컨텍스트 : 프레임워크에서 컨테이너들이 관리하는것들을 일컫는다, 스프링의 bean들을 로딩,관리하는 것은 spring context, persistence container가 관리?
- EntityManager : interface, 영속성 컨텍스트에서 가장 주체적인 bean
- 영속성 컨텍스트 설정 : persistence.xml 파일을 METAIMF디렉토리 하위에 생성해서 사용

#Entity Cache
- 영속성 컨텍스트 내에서 entity들을 관리하는 EntityManager는 Cache를 가진다
- 실제로 .save() 메서드를 실행시키는 시점에 DB에 반영되지 않는다, 우리가 사용하는 영속성 컨텍스트와 실제 DB 사이에 데이터 갭이 발생한다
- DB에서 find로 데이터를(3번) 찾을때 쿼리가 한번만 실행되지만 결과는 3번 나온다(@Transactional 어노테이션 있어야함, findById로 검색할때), email로 검색할시 쿼리가 3번 찍힌다
- 자동으로 entity에 대해서 캐시처리를 하는것이 1차캐시라고 한다, map의형태로 만들어진다(key=id값, value=entity), 아이디로 조회시 1차캐시 검색 entity리턴 또는 DB에서 검색
- @Transactional을 쓰는경우 EntityManager가 즉시 DB에 반영하지 않는다, 자체덕으로 entity 상태를 merge하고 최종적으로 DB에 반영해야되는 내용에 대해서만 쿼리를 실행, 쓰기 지연현상
- transaction이 끝날때마다 flush가 일어나고 @Transactional을 걸면 전체 로직이 실행되고 transaction이 끝나는 시점에 commit이 일어나면서 auto-flush가 일어난다

#Entity Lifecycle
- 비영속상태(transient) : 영속성 컨텍스트가 해당 entity객체를 관리하지 않는 상태, @Transient
- 영속상태(managed) : 해당 entity가 영속성 컨텍스트 관리하에 존재하는 상태, 객체의 변화를 별도로 처리하지 않더라도 DB에 반영한다
- 준영속상태(detached) : 영속화 되었던 객체를 분리시켜 영속성 컨텍스트 밖으로 꺼내는 동작, entityManger의 clear나 close는 좀더 파괴적인? 방법 변경내역들이 다 사라지므로 flush로 반영후에 할것
- 삭제상태(removed) : 

-더티체크 : 영속성 컨텍스트가 가지고 있는 entity객체는 처음 컨텍스트에 로드 될때 해당 정보를 일종의 snapshot으로 복사해서 보관한다, 변경내용을 Db에 저장하는 시점(flush , commit)에
해당 snapshot과 현재 entity의 값을 비교후, 코드가 없더라도 db에 반영시킨다, 대량의 entity를 다룰 경우 로직의 성능 저하 발생

#Transaction
- A (원자성, atomicity) : 트랜잭션의 작업이 부분적으로 실행되거나 중단되지 않는 것을 보장, All or Nothing
- C (일관성, Consistency) : 트랜잭션이 성공적으로 완료되면 일관적인 DB상태를 유지, 데이터가 미리 정의된 규칙에서만 수정이 가능
- I  (격리성, Isolation)  : 한 트랜잭션이 다른 트랜잭션의 작업에 끼어들지 못하도록 보장
- D (지속성, Durability) : 성공적으로 수행된 트랜잭션은 영원히 반영
- @Transactional은 트랜잭션이 종료될때까지 DB에 반영하지 않는다
- 현업에서 발생하는 잘못된 사용 예제
  - Checked Exception : RuntimeException이 발생하면 트랜잭션이 롤백되지만 Exception은 트랜잭션 안에서 발생해도 반영 내용이 롤백되지 않는다, 
  - private 메서드에서의 @Transactional 사용 : bean 외부 aop에서 어노테이션을 읽기 때문에 어노테이션이 작동안함, bean 클래스 내부에서 내부를 호출하면 public이든 private이건 어노테이션 효과가 없음

- isolation 속성 : 트랜잭션 격리단계, 동시에 발생하는 트랜잭션간에데이터 접근을 정의
  - DEFAULT : 데이터베이스의 디폴트값을 따라간다
  - READ_UNCOMMITTED : 레벨 0, 커밋되지 않은 데이터가 읽힌다, 락이 발생할 수 있다, 롤백을 해도 업데이트가 일어나는 예시(엔티티 전체를 업데이트해서) @DynamicUpdate로 필요한 정보만 업대이트로 해결, 데이터 정합성을 해치는 경우가 많아서 잘 사용안함
  - READ_COMMITTED : 레벨 1, 커밋된 데이터만 읽는다, @DynamicUpdate 사용 안해도 됨, 위에꺼 업글버젼	
  - REPEATABLE_READ : 레벨 2, 트랜잭션 내에서 반복적으로 조회해도 항상 동일한 값이 리턴된다, 트랜잭션 시작에 조회한 데이터를 스냅샷으로 가지고  계속 리턴한다, 팬텀리드 현상이 발생할 수 있음
  - SERIALIZABLE : 레벨 3, 커밋이 일어나지 않은 트랜잭션에는 락을 통해 waiting하고 커밋을 통해 추가적인 로직을 진행
  - 레벨이 높을 수록 격리단계가 강력해지고 데이터의 정합성을 보장하지만 동시처리 수행능력이 떨어진다, 일반적으로 READ_COMMITTED나 REPEATED_READ를 사용하고 특별한 경우에만 나머지를 사용
  - 반복적으로 조회를 했을때 값이 변경될 수있는 상태를 UNREPEATABLE_READ라고 한다

- propagation 속성 : 트랜잭션의 전파, 현재 트랜잭션과 다른 클래스 메서드의 트랜잭션 사이의 교통정리 정의
  - DEFAULT : REQUIRED
  - REQUIRED : 디폴트 값, 기존 사용중인 트랜잭션이 있다면 그대로 사용, 없다면 새로운 트랜잭션 생성후 사용, 내부 로직에서 에러가 전체에 영향을 준다, 전부 롤백이거나 전부 커밋이거나, 제일 많이 사용?
  - SUPPORTS : 호출하는 쪽에 트랜잭션이 있다면 사용(재활용)하지만 없다면 트랜잭션을 생성하지않고 없는대로 처리한다
  - MANDATORY : 트랜잭션이 필수로 존재해야함, 사용중인 트랜잭션이 있어야하고 없으면 오류를 발생시킨다
  - REQUIRES_NEW : 기존 트랜잭션이 있든 없든 새로운 트랜잭션 생성, 호출하는 쪽의 커밋/롤백과 관계없이 자체적으로 커밋/롤백을 진행, 두개의 독립적인 트랜잭션
  - NOT_SUPPORTED : 호출하는쪽이 트랜잭션이 있으면 일시정지(트랜잭션과 별개), 해당 영역은 트랜잭션 없이 실행, 호출 쪽은 호출받는 쪽의 실행이 완료된 이후에 별도로 처리
  - NEVER : 트랜잭션이 없어야함, 트랜잭션이 있으면 오류발생
  - NESTED : 호출하는 쪽의 트랜잭션을 그대로 사용한다, REQUIRES_NEW와 비슷하다, 하나의 트랜잭션이지만 약간의 분리, 종속적인 트랜잭션이지만 상위의 트랜잭션에 영향을 주지 않는다, save point까지의 성공은 보장한다,
	     jpa transaction manager는 지원하지 않는다, 의도한 대로 작동을 잘 하지 않는다, 고로 잘 사용하지 않는다
 
 -@Transactional은 메서드 뿐만 아니라 클래스에도 붙힐수 있다, 클래스 scope은 각각의 메서드에 대한 트랜잭션 설정을 의미, 메서드 scope이 선 적용된다

##JPA에서 Cascade 활용하기(영속성 전이)  
  - All : 밑에꺼 전부 적용
  - PERSIST : 하위 엔티티까지 영속화
  - REMOVE : 연결된 하위 엔티티까지 제거
  - MERGE : 하위 엔티티까지 병합 작업을 지속(하위 엔티티까지 조회후 업데이트)
  - REFRESH : db로부터 인스턴스 값을 다시 읽어온다(하위 엔티티까지), 새로고침
  - DETACH : 하위 엔티티까지 영속성 컨텍스트에서 제거(비영속화)

  - orphanRemoval : 단순히 연관관계가 끊어질때는(setter로 null) remove이벤트가 발생하지 않는다. 이때 연관관계가 없는 엔티티를 살려둘지 삭제할지의 옵션
	- true : 연관 엔티티가 삭제됨(db에서)
	- false : 연관 엔티티가 db에 남아있는다

###Converter
  - 데이터 변환
  - 람다식으로 스위치문 돌리는거 알아볼것

### N + 1 문제
  - 쿼리가 하나가 실행되고 또 N개가 실핼되는 현상
  - Eager fetch : 엔티티 호출시에 다같이 땡겨오는것, getter로 땡겨온다, 리스트에 2개가 검색되엇다고 할때 연관관계 엔티티를 전부 돌면서 쿼리를 날린다.(나의 예시에서 리뷰가 2개 그래서 comment 쿼리도 2번)
  - Lazy fetch : 엔티티의 getter가 호출될시 필요 데이터를 땡겨온다, 세션(영속성 컨텍스트가 엔티티를 관리하는 라이프 사이클, 트랜잭션)이 열려있을때 그 안에서만 가능
  - 해결방법
	1 : @Query에 fetch join 쿼리를 커스텀으로 만드는것
	2 : @EntityGraph 사용, attributePath로 속성 값을 지정
	3 : FetchMode.SUBSELECT
	4 : QueryBuilder

Fetch Join과 EntityGraph 주의할 점
Fetch Join과 EntityGraph는 JPQL을 사용하여 JOIN문을 호출한다는 공통점이 있다. 또한, 공통적으로 카테시안 곱(Cartesian Product)이 발생하여 Owner의 수만큼 Cat이 중복 데이터가 존재할 수 있다. 그러므로 중복된 데이터가 컬렉션에 존재하지 않도록 주의해야 한다.
그렇다면 어떻게 중복된 데이터를 제거할 수 있을까?
컬렉션을 Set을 사용하게 되면 중복을 허용하지 않는 자료구조이기 때문에 중복된 데이터를 제거할 수 있다.
JPQL을 사용하기 때문에 distinct를 사용하여 중복된 데이터를 조회하지 않을 수 있다

FetchMode.SUBSELECT
다음 해결방법은 쿼리 한번으로 해결하는 것은 아니고 두번의 쿼리로 해결하는 방법이다. 해당 엔티티를 조회하는 쿼리는 그대로 발생하고 연관관계의 데이터를 조회할 때 서브 쿼리로 함께 조회하는 방법이다.

QueryBuilder를 사용해보자
Query를 실행하도록 지원해주는 다양한 플러그인이 있다. 대표적으로 Mybatis, QueryDSL, JOOQ, JDBC Template 등이 있을 것이다. 이를 사용하면 로직에 최적화된 쿼리를 구현할 수 있다.

  - 쿼리 수가 문제가 아님, 쿼리를 하나만 날려도 데이터가 크다면 더 부하를 줄 수도 있고, 작은 데이터를 너무 많이 실행시켜 부하를 주는 경우도 있다, 알아서 잘하자

###JPA에서 영속성 컨텍스트 불일치 이슈
  - 실제 값과 캐시 데이터가 다른경우가 있으니 캐시 데이터를 잘 관리해야함

###JPA DirtyCheck와 성능이슈
  - 영속성 컨텍스트에서 DirtyCheck기능이 영속성 관리중에 일어난 변경은 별도의 .save()없이도 db에서 영속화를 시켜준다
  - 의도치 않게 db에 반영되어 예상치 못한 예외 발생 가능
  - 트랜잭션내에서 참조하기 위해 select한 엔티티에 대해서는 일일히 dirty check의 과정을 거친다 -> 많은 건수의 큰 데이터를 핸들링하는 배치 로직의 경우 시간이 많이 늘어남
  - dirty check 없이 데이터를 조회하려면 @Transactional(readOnly = true)로 설정 -> slave db를 참조, 세션의 flush모드를 FlushModeType.MANUAL로 변경(자동으로 flush 시키지 않기 때문에 dirty check가 스킵됨)
